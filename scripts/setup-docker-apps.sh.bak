#!/bin/bash

# Setup Docker Apps - Clone and prepare new repositories for deployment
set -e

# Configuration
APPS_DIR="/var/www/zaylegend/apps"
LOG_FILE="/var/log/docker-apps-setup.log"
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$LOG_FILE"
}

# App configurations with your actual repositories
declare -A APPS=(
    ["chord-genesis"]="https://github.com/yetog/chord-genesis.git"
    ["spritegen"]="https://github.com/yetog/spritegen.git"
    ["dj-visualizer"]="https://github.com/yetog/apr.git"
    ["fineline"]="https://github.com/yetog/fineline.git"
    ["game-hub"]="https://github.com/yetog/playful-space-arcade.git"
)

declare -A PORTS=(
    ["chord-genesis"]="3001"
    ["spritegen"]="3002"
    ["dj-visualizer"]="3003"
    ["fineline"]="3004"
    ["game-hub"]="3005"
)

declare -A DESCRIPTIONS=(
    ["chord-genesis"]="Music chord generation and progression tool"
    ["spritegen"]="AI-powered sprite generation platform"
    ["dj-visualizer"]="Audio visualization and DJ tools"
    ["fineline"]="Personal journaling and reflection app"
    ["game-hub"]="Retro game collection and arcade"
)

# Create apps directory
log "Creating apps directory: $APPS_DIR"
sudo mkdir -p "$APPS_DIR"
cd "$APPS_DIR"

# Clone repositories and create Dockerfiles
for app in "${!APPS[@]}"; do
    log "Setting up $app..."

    if [ -d "$app" ]; then
        log "Directory $app exists, updating..."
        cd "$app"
        git pull origin main 2>/dev/null || git pull origin master 2>/dev/null || warning "Failed to update $app"
        cd ..
    else
        log "Cloning $app from ${APPS[$app]}"
        git clone "${APPS[$app]}" "$app" || error "Failed to clone $app"
    fi

    # Create optimized Dockerfile for each app
    log "Creating Dockerfile for $app..."
    cat > "$app/Dockerfile" << EOF
# Dockerfile for $app - ${DESCRIPTIONS[$app]}
FROM node:18-alpine as builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./
COPY bun.lockb* ./

# Install dependencies (try multiple package managers)
RUN if [ -f yarn.lock ]; then yarn install --frozen-lockfile; \\
    elif [ -f bun.lockb ]; then npm install -g bun && bun install; \\
    else npm ci --only=production; fi

# Copy source code
COPY . .

# Build the application
RUN if [ -f yarn.lock ]; then yarn build; \\
    elif [ -f bun.lockb ]; then bun run build; \\
    else npm run build; fi

# Production stage
FROM nginx:alpine

# Copy built assets
COPY --from=builder /app/dist /usr/share/nginx/html 2>/dev/null || \\
COPY --from=builder /app/build /usr/share/nginx/html

# Create nginx configuration for SPA
RUN echo 'server { \\
    listen 80; \\
    server_name localhost; \\
    root /usr/share/nginx/html; \\
    index index.html; \\
    \\
    # Handle client-side routing \\
    location / { \\
        try_files \$uri \$uri/ /index.html; \\
    } \\
    \\
    # Security headers \\
    add_header X-Frame-Options "SAMEORIGIN" always; \\
    add_header X-Content-Type-Options "nosniff" always; \\
    add_header X-XSS-Protection "1; mode=block" always; \\
    \\
    # Cache static assets \\
    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ { \\
        expires 1y; \\
        add_header Cache-Control "public, immutable"; \\
    } \\
    \\
    # Gzip compression \\
    gzip on; \\
    gzip_vary on; \\
    gzip_min_length 1024; \\
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json; \\
}' > /etc/nginx/conf.d/default.conf

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
EOF

    # Create .dockerignore for optimization
    log "Creating .dockerignore for $app..."
    cat > "$app/.dockerignore" << EOF
node_modules
.git
.gitignore
README.md
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.DS_Store
*.log
coverage
.nyc_output
dist
build
EOF

    log "✓ Setup complete for $app"
done

# Create master docker-compose.yml
log "Creating docker-compose.yml..."
cat > "docker-compose.yml" << EOF
version: '3.8'

services:
EOF

for app in "${!APPS[@]}"; do
    cat >> "docker-compose.yml" << EOF
  $app:
    build: ./$app
    container_name: $app
    ports:
      - "${PORTS[$app]}:80"
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "app.name=$app"
      - "app.description=${DESCRIPTIONS[$app]}"
    environment:
      - NODE_ENV=production

EOF
done

cat >> "docker-compose.yml" << EOF
networks:
  app-network:
    driver: bridge
    name: zaylegend-apps

volumes:
  app-data:
    driver: local
EOF

# Create health check script
log "Creating health check script..."
cat > "health-check.sh" << 'EOF'
#!/bin/bash

# Health check script for all Docker apps
echo "=== Docker Apps Health Check ==="
echo "Timestamp: $(date)"
echo

apps=("chord-genesis:3001" "spritegen:3002" "dj-visualizer:3003" "fineline:3004" "game-hub:3005")

for app_port in "${apps[@]}"; do
    app=$(echo $app_port | cut -d: -f1)
    port=$(echo $app_port | cut -d: -f2)
    
    printf "%-15s: " "$app"
    
    if curl -f -s "http://localhost:$port" > /dev/null; then
        echo "✓ HEALTHY"
    else
        echo "✗ UNHEALTHY"
    fi
done

echo
echo "Docker container status:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "label=app.name"
EOF

chmod +x "health-check.sh"

# Create deployment info
log "Creating deployment info file..."
cat > "deployment-info.md" << EOF
# Docker Apps Deployment

## Applications
EOF

for app in "${!APPS[@]}"; do
    cat >> "deployment-info.md" << EOF
- **$app** (Port ${PORTS[$app]}): ${DESCRIPTIONS[$app]}
  - URL: https://zaylegend.com/$app/
  - Repository: ${APPS[$app]}
EOF
done

cat >> "deployment-info.md" << EOF

## Commands
- Start all apps: \`docker-compose up -d\`
- Stop all apps: \`docker-compose down\`
- View logs: \`docker-compose logs -f [service-name]\`
- Health check: \`./health-check.sh\`
- Rebuild: \`docker-compose up -d --build\`

## Ports
$(for app in "${!APPS[@]}"; do echo "- $app: ${PORTS[$app]}"; done)

## Access URLs
$(for app in "${!APPS[@]}"; do echo "- $app: https://zaylegend.com/$app/"; done)
EOF

log "Repository setup complete!"
log "Location: $APPS_DIR"
log "Apps configured: ${!APPS[*]}"
log "Next steps:"
log "1. Run: cd $APPS_DIR && ./build-docker-apps.sh"
log "2. Update Nginx configuration"
log "3. Test deployment"

info "Setup script completed successfully!"
EOF
